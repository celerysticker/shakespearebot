# -*- coding: utf-8 -*-
"""
Created on Sun Mar 13 12:53:19 2016

@author: nancywen
"""
import random
import numpy as np


def main():    
    initial_state_probs = {0: 0.11543784206986435,
     1: 0.13142667577020942,
     2: 0.13452497308668032,
     3: 0.12798298189944912,
     4: 0.04038262799632536,
     5: 0.005081910488939122,
     6: 0.13212419274861562,
     7: 0.14765374852995974,
     8: 0.12994783063068782,
     9: 0.035437216779269136}
    A = [[2.125157758616905e-20, 1.0193639835768e-20, 1.3579932981191273e-26, 2.492172604754641e-10, 4.165034992943676e-20, 0.9485916818272294, 5.3082724623104554e-18, 1.4130733367068757e-20, 0.027491478655345732, 0.023916839268207833], [6.787839804520272e-21, 1.4731604473631907e-16, 1.2119404124080617e-35, 0.9585272756106625, 1.0871121857032523e-09, 6.895294302851192e-23, 5.891936846005056e-14, 0.04143414957277749, 3.491901832213123e-05, 3.6547110663052385e-06], [4.953921800526204e-13, 0.08389132729317562, 0.015513223444833857, 0.0435400503309658, 2.32008834987061e-14, 2.5645005288038984e-24, 0.6771941563776775, 1.9392340785566688e-09, 0.1511219697970946, 0.028739270816499966], [1.1011911818070383e-18, 0.16258587708241756, 2.1362506274764686e-26, 0.00993537200945339, 0.010705773341266328, 3.473900952039458e-07, 3.8481508967097207e-07, 0.6579665054991732, 6.035950512320576e-05, 0.15874538035738134], [4.256644629455128e-10, 0.018452943134817334, 0.0005618123318655427, 5.983112674014014e-06, 0.01848198608004337, 1.8434792825125387e-17, 2.467088522227523e-37, 0.021582301782375093, 0.9409149731325601, 8.415281703591267e-34], [0.2275046519461003, 0.4070186953624149, 3.658653849455055e-29, 0.002798952401259089, 6.463247310654751e-15, 0.05964234923267667, 9.592930252191278e-06, 0.0021117448879032627, 0.16143525366950157, 0.13947875956988537], [0.04493303405453681, 0.3242462669886537, 0.24314825954488592, 2.3208557626496706e-11, 1.4432384936733553e-30, 2.1309481084230986e-13, 1.9655234446367875e-30, 0.17746531006240152, 0.17710251543238775, 0.033104613893712456], [0.6686375723664199, 0.06905887492238702, 8.561070215470572e-23, 8.585400584791959e-18, 0.014270702746720362, 0.06376448116551668, 0.0038151356214904996, 1.178398668774844e-16, 0.03248969221202726, 0.1479635409654382], [2.930895840299005e-10, 0.27162506827854055, 3.755730316847383e-26, 2.6696906977529464e-29, 2.652818439820121e-27, 0.03568064523621137, 6.614946324444643e-29, 0.056673849329587515, 1.7970321887195085e-10, 0.6360204366828678], [0.01611068881047586, 1.9893766592368235e-25, 0.9518242080583704, 6.180262806025913e-30, 1.7514004044089923e-51, 5.265931921127318e-26, 7.233044032045398e-42, 0.03206510170703733, 2.4864016328348315e-40, 1.4241163141093466e-09]]
    O = []
    max_iter = 10 # number of hidden states to  generate   
    state_path = find_state_path(max_iter, A, initial_state_probs)
    emissions = get_emissions(state_path, O)
    
    print state_path
    prettyprint(emissions)

def find_state_path(max_iter, A, initial_state_probs):    
    current_state = random.randint(0,9)
    state_path = [current_state]
    
    
    for i in range(max_iter - 1):
        current_probs = A[current_state]
        best_state = np.argmax(current_probs)
        state_path.append(best_state)
        current_state = best_state

    return state_path

def get_emissions(state_seq, OM):
    ''' Given state sequence, return sequence of emissions '''
    emission = []
    for state in state_seq:
        # OM is a list of dictionaries
        # find max
        max_prob = 0
        max_obs = None
        for key in OM[state]:
            if OM[state][key] > max_prob:
                max_prob = OM[state][key]
                max_obs = key
        emission.append(max_obs)
    return emission

def prettyprint(arr):
    print ' '.join(arr)

if __name__ == "__main__":
    main()
